(()=>{const t=JSON.parse(localStorage.fsm);let n=[],e=[],o=[],s=[],a=[];t.nodes.forEach(t=>{e.push(t.text),t.isAcceptState&&s.push(t.text)}),t.links.forEach(e=>{"StartLink"===e.type?o.push(t.nodes[e.node].text):"SelfLink"===e.type?e.text.split(/,\s?/).forEach(o=>{n.includes(o)||n.push(o),a.push([t.nodes[e.node].text,o,t.nodes[e.node].text])}):e.text.split(/,\s?/).forEach(o=>{n.includes(o)||n.push(o),a.push([t.nodes[e.nodeA].text,o,t.nodes[e.nodeB].text])})}),clear&&clear();let r="// Code exported from http://madebyevan.com/fsm/ with https://github.com/grallm/export-fsm\n// Alphabet\nSet<String> A = new HashSet<String>();\n";for(let t of n)r+='A.add("'+t+'");\n';r+="\n// States\nSet<Etat> Q = new HashSet<Etat>();\n";for(let t of e)r+='Q.add(new Etat("'+t+'"));\n';r+="\n// Initial States\nSet<String> I = new HashSet<String>();\n";for(let t of o)r+='I.add("'+t+'");\n';r+="\n// Final States\nSet<String> F = new HashSet<String>();\n";for(let t of s)r+='F.add("'+t+'");\n';r+="\n// Transitions\nSet<Transition> mu = new HashSet<Transition>();\n";for(let t of a)r+='mu.add(new Transition("'+t[0]+'","'+t[1]+'","'+t[2]+'"));\n';r+="\n// Constructor\nAutomate afn = new AFN(A, Q, I, F, mu);\n\n",console.log(r)})();